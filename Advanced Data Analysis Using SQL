**Advanced Data Analysis Using SQL**

## **1. Using Window Functions, Subqueries, and CTEs for Data Analysis**

### **Tables Used**
#### **`Sales` Table:**
| SaleID | Product  | Amount | SaleDate   | CustomerID |
|--------|---------|--------|------------|------------|
| 1      | Laptop  | 1200   | 2024-01-10 | 101        |
| 2      | Phone   | 800    | 2024-01-15 | 102        |
| 3      | Tablet  | 500    | 2024-01-20 | 103        |
| 4      | Laptop  | 1300   | 2024-02-10 | 104        |
| 5      | Phone   | 750    | 2024-02-15 | 105        |

#### **`Customers` Table:**
| CustomerID | Name    | City    |
|------------|--------|---------|
| 101        | Alice  | NY      |
| 102        | Bob    | LA      |
| 103        | Charlie| SF      |
| 104        | David  | NY      |
| 105        | Emma   | LA      |

---

## **2. Window Functions for Running Totals and Rankings**

### **Calculate Running Total of Sales**
```sql
SELECT SaleID, Product, Amount, SaleDate,
       SUM(Amount) OVER (ORDER BY SaleDate) AS RunningTotal
FROM Sales;
```

**Output:**
| SaleID | Product | Amount | SaleDate   | RunningTotal |
|--------|---------|--------|------------|--------------|
| 1      | Laptop  | 1200   | 2024-01-10 | 1200         |
| 2      | Phone   | 800    | 2024-01-15 | 2000         |
| 3      | Tablet  | 500    | 2024-01-20 | 2500         |
| 4      | Laptop  | 1300   | 2024-02-10 | 3800         |
| 5      | Phone   | 750    | 2024-02-15 | 4550         |

### **Rank Products by Sales Amount**
```sql
SELECT SaleID, Product, Amount,
       RANK() OVER (ORDER BY Amount DESC) AS SalesRank
FROM Sales;
```

**Output:**
| SaleID | Product | Amount | SalesRank |
|--------|---------|--------|-----------|
| 4      | Laptop  | 1300   | 1         |
| 1      | Laptop  | 1200   | 2         |
| 2      | Phone   | 800    | 3         |
| 5      | Phone   | 750    | 4         |
| 3      | Tablet  | 500    | 5         |

---

## **3. Using Subqueries for Customer Insights**

### **Find Customers Who Have Spent More Than the Average Sale Amount**
```sql
SELECT Name, City
FROM Customers
WHERE CustomerID IN (
    SELECT CustomerID
    FROM Sales
    WHERE Amount > (SELECT AVG(Amount) FROM Sales)
);
```

**Output:**
| Name  | City |
|-------|------|
| Alice | NY   |
| David | NY   |

---

## **4. Using Common Table Expressions (CTEs) for Monthly Sales Trends**

### **Calculate Monthly Sales Total**
```sql
WITH MonthlySales AS (
    SELECT DATE_FORMAT(SaleDate, '%Y-%m') AS SaleMonth,
           SUM(Amount) AS TotalSales
    FROM Sales
    GROUP BY SaleMonth
)
SELECT * FROM MonthlySales;
```

**Output:**
| SaleMonth | TotalSales |
|-----------|-----------|
| 2024-01   | 2500      |
| 2024-02   | 2050      |

---


